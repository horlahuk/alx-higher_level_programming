The ``1-my_list`` module
========================

Using ``MyList``
----------------

Importing function from the module:
	>>> MyList = __import__("1-my_list").MyList

Checking for module docstring:
	>>> m = __import__("1-my_list").__doc__
	>>> len(m) > 1
	True

Checking for class docstring:
	>>> c = __import__("1-my_list").MyList.__doc__
	>>> len(c) > 1
	True

Checking for method docstring:
	>>> met = __import__("1-my_list").MyList.print_sorted.__doc__
	>>> len(met) > 1
	True

Checking that MyList inherits from list:
	>>> issubclass(MyList, list)
	True

Checking for empty list:
	>>> l = MyList()
	>>> l.print_sorted()
	[]

Checking that appending works:
	>>> l.append(1)
	>>> l.append(2)
	>>> l.append(3)
	>>> l.append(4)
	>>> print(l)
	[1, 2, 3, 4]

Checking for list in correct order:
	>>> l.print_sorted()
	[1, 2, 3, 4]

Checking for reversed list:
	>>> l = MyList()
	>>> l.append(4)
	>>> l.append(3)
	>>> l.append(2)
	>>> l.append(1)
	>>> print(l)
	[4, 3, 2, 1]
	>>> l.print_sorted()
	[1, 2, 3, 4]
	>>> print(l)
	[4, 3, 2, 1]

Checking for 1 negative number:
	>>> l.append(-2)
	>>> l.append(6)
	>>> print(l)
	[4, 3, 2, 1, -2, 6]
	>>> l.print_sorted()
	[-2, 1, 2, 3, 4, 6]
	>>> print(l)
	[4, 3, 2, 1, -2, 6]

Checking for negative numbers:
	>>> l = MyList()
	>>> l.append(-11)
	>>> l.append(-8)
	>>> l.append(-2)
	>>> l.append(-6)
	>>> print(l)
	[-11, -8, -2, -6]
	>>> l.print_sorted()
	[-11, -8, -6, -2]
	>>> print(l)
	[-11, -8, -2, -6]

Checking for too many arguments:
	>>> l.print_sorted(1)
	Traceback (most recent call last):
	...
	TypeError: print_sorted() takes 1 positional argument but 2 were given
